#pentesting
import os
import shutil
import subprocess
import tkinter as tk
from tkinter import messagebox, filedialog

# Lista de herramientas requeridas
tools = {
    "nuclei": "nuclei",
    "httpx": "httpx",
    "subfinder": "subfinder",
    "nabuu": "nabuu",
    "wpscan": "wpscan"
}

# Instala herramientas si no están presentes
def check_and_install_tools():
    for name, command in tools.items():
        if shutil.which(command) is None:
            messagebox.showinfo("Instalando", f"Instalando {name}...")
            if name in ["nuclei", "httpx", "subfinder"]:
                subprocess.run(f"go install github.com/projectdiscovery/{command}/cmd/{command}@latest", shell=True)
            elif name == "wpscan":
                subprocess.run("gem install wpscan", shell=True)
            elif name == "nabuu":
                subprocess.run("pip install nabuu", shell=True)
            else:
                messagebox.showwarning("Error", f"No se sabe cómo instalar {name}")

def run_command(command):
    output = subprocess.getoutput(command)
    result_window = tk.Toplevel()
    result_window.title("Resultados")
    text = tk.Text(result_window)
    text.insert(tk.END, output)
    text.pack(expand=True, fill='both')

def execute_tool(tool, target):
    if tool == "httpx":
        cmd = f"echo {target} | httpx -silent -random-agent"
    elif tool == "nuclei":
        cmd = f"echo {target} | nuclei -silent -H 'X-Forwarded-For: 127.0.0.1'"
    elif tool == "subfinder":
        cmd = f"subfinder -d {target} -silent"
    elif tool == "nabuu":
        cmd = f"nabuu -u {target}"
    elif tool == "wpscan":
        cmd = f"wpscan --url {target} --random-user-agent --disable-tls-checks"
    else:
        messagebox.showerror("Error", "Herramienta no soportada")
        return

    run_command(cmd)
    export_vulnerabilities(cmd)

def export_vulnerabilities(command):
    # Ejecutar el comando y filtrar vulnerabilidades críticas
    output = subprocess.getoutput(command)
    critical_vulnerabilities = []
    for line in output.splitlines():
        if "CVE" in line:  # Filtrar líneas que contienen identificadores CVE
            critical_vulnerabilities.append(line)

    if critical_vulnerabilities:
        # Guardar en un archivo .txt
        with open("vulnerabilidades_criticas.txt", "w") as file:
            for vuln in critical_vulnerabilities:
                file.write(vuln + "\n")
        messagebox.showinfo("Exportación", "Vulnerabilidades críticas exportadas a 'vulnerabilidades_criticas.txt'.")

def main_ui():
    window = tk.Tk()
    window.title("Pentest GUI")

    tk.Label(window, text="Target (URL o dominio):").pack()
    target_entry = tk.Entry(window, width=50)
    target_entry.pack()

    tk.Label(window, text="Selecciona la herramienta:").pack()
    tool_var = tk.StringVar(window)
    tool_var.set("nuclei")
    tool_menu = tk.OptionMenu(window, tool_var, *tools.keys())
    tool_menu.pack()

    def on_run():
        target = target_entry.get()
        tool = tool_var.get()
        if target:
            execute_tool(tool, target)
        else:
            messagebox.showwarning("Falta información", "Introduce un objetivo.")

    tk.Button(window, text="Ejecutar escaneo", command=on_run).pack(pady=10)

    window.mainloop()

# Inicio
if __name__ == "__main__":
    check_and_install_tools()
    main_ui()