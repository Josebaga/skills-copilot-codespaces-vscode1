import psutil
import subprocess
import os
from datetime import datetime
from odf.opendocument import OpenDocumentText
from odf.text import H, P

# FUNCIONES GENERALES
def add_paragraph(doc, text, heading=False, level=1):
    if heading:
        doc.text.addElement(H(outlinelevel=level, text=text))
    else:
        doc.text.addElement(P(text=text))

def get_running_processes():
    procesos = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'username', 'memory_info']):
        try:
            procesos.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return procesos

def get_suspicious_processes(processes):
    sospechosos = []
    palabras_clave = ['keylogger', 'bitcoin', 'miner', 'ransom', 'botnet', 'trojan']
    for proc in processes:
        name = proc.get('name', '').lower()
        exe = str(proc.get('exe', '')).lower()
        if any(p in name or p in exe for p in palabras_clave):
            sospechosos.append(proc)
    return sospechosos

def get_network_connections():
    try:
        output = subprocess.check_output("netstat -ano", shell=True, encoding='utf-8')
        return output
    except:
        return "No se pudo obtener conexiones de red."

# GENERADOR DE INFORMES
def generar_informe_tecnico(ruta, procesos, sospechosos, conexiones):
    doc = OpenDocumentText()
    add_paragraph(doc, "📄 INFORME FORENSE TÉCNICO", heading=True)
    add_paragraph(doc, f"Fecha de análisis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    add_paragraph(doc, "🔧 Procesos en ejecución", heading=True)
    for p in procesos:
        texto = f"PID: {p['pid']}, Nombre: {p['name']}, Usuario: {p.get('username', 'N/A')}, Ruta: {p.get('exe', 'N/A')}, RAM: {p.get('memory_info').rss // 1024} KB"
        add_paragraph(doc, texto)

    add_paragraph(doc, "🚨 Procesos sospechosos detectados", heading=True)
    if sospechosos:
        for p in sospechosos:
            texto = f"[Sospechoso] PID: {p['pid']}, Nombre: {p['name']}, Ruta: {p.get('exe', 'N/A')}"
            add_paragraph(doc, texto)
    else:
        add_paragraph(doc, "No se detectaron procesos sospechosos con las reglas actuales.")

    add_paragraph(doc, "🌐 Conexiones de red activas", heading=True)
    add_paragraph(doc, "A continuación se listan las conexiones activas, incluyendo la dirección IP, puerto local, remoto y PID:")
    add_paragraph(doc, conexiones)

    doc.save(os.path.join(ruta, "informe_tecnico.odt"))
    print("✅ Informe técnico generado.")

def generar_informe_ejecutivo(ruta, procesos, sospechosos, conexiones):
    doc = OpenDocumentText()
    add_paragraph(doc, "📄 INFORME FORENSE EJECUTIVO", heading=True)
    add_paragraph(doc, f"Fecha de análisis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    add_paragraph(doc, "✅ Resumen general", heading=True)
    add_paragraph(doc, f"Total de procesos en ejecución: {len(procesos)}")
    add_paragraph(doc, f"Procesos potencialmente sospechosos: {len(sospechosos)}")

    add_paragraph(doc, "🔍 Evaluación de seguridad", heading=True)
    if sospechosos:
        add_paragraph(doc, "⚠️ Se han detectado procesos que podrían ser maliciosos. Se recomienda su análisis inmediato.")
    else:
        add_paragraph(doc, "✔️ No se han identificado amenazas evidentes en los procesos en ejecución.")

    add_paragraph(doc, "🌐 Actividad de red", heading=True)
    resumen_red = conexiones.splitlines()
    conexiones_count = sum(1 for line in resumen_red if "TCP" in line or "UDP" in line)
    add_paragraph(doc, f"Conexiones activas detectadas: {conexiones_count}")
    if conexiones_count > 50:
        add_paragraph(doc, "⚠️ Se observa una actividad de red significativa.")
    else:
        add_paragraph(doc, "✔️ Actividad de red dentro de parámetros normales.")

    doc.save(os.path.join(ruta, "informe_ejecutivo.odt"))
    print("✅ Informe ejecutivo generado.")

# PRINCIPAL
def main():
    ruta_salida = r"C:\Users\Joseba\Desktop\analisis forense rafa"
    if not os.path.exists(ruta_salida):
        os.makedirs(ruta_salida)

    print("🕵️‍♂️ Iniciando análisis forense del sistema...")

    procesos = get_running_processes()
    sospechosos = get_suspicious_processes(procesos)
    conexiones = get_network_connections()

    generar_informe_tecnico(ruta_salida, procesos, sospechosos, conexiones)
    generar_informe_ejecutivo(ruta_salida, procesos, sospechosos, conexiones)

    print(f"\n📁 Informes guardados en: {ruta_salida}")

if __name__ == "__main__":
    main()